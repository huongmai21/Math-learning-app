import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import {
  fetchComments,
  postComment,
  updateComment,
  deleteComment,
} from "../../../services/commentService";
import { toast } from "react-toastify";
import ReactPaginate from "react-paginate";
import "./Comment.css";

const CommentSection = ({ referenceId, referenceType }) => {
  const { user } = useSelector((state) => state.auth);
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState("");
  const [editingId, setEditingId] = useState(null);
  const [editingContent, setEditingContent] = useState("");
  const [loading, setLoading] = useState(false);
  const [page, setPage] = useState(1);
  const [total, setTotal] = useState(0);
  const itemsPerPage = 5;

  const loadComments = async (pageToLoad = 1) => {
    try {
      setLoading(true);
      const data = await fetchComments(referenceId, referenceType, {
        page: pageToLoad,
        limit: itemsPerPage,
      });
      setComments(data.data);
      setTotal(data.total);
      setPage(pageToLoad);
    } catch (err) {
      toast.error("L·ªói khi t·∫£i b√¨nh lu·∫≠n: " + (err.message || "Vui l√≤ng th·ª≠ l·∫°i."));
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadComments();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [referenceId, referenceType]);

  const handlePost = async () => {
    if (!newComment.trim()) {
      toast.error("B√¨nh lu·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
      return;
    }
    try {
      setLoading(true);
      await postComment(referenceId, referenceType, newComment);
      setNewComment("");
      toast.success("ƒêƒÉng b√¨nh lu·∫≠n th√†nh c√¥ng!");
      loadComments(1);
    } catch (err) {
      toast.error("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ b√¨nh lu·∫≠n.");
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° b√¨nh lu·∫≠n n√†y?")) return;
    try {
      setLoading(true);
      await deleteComment(id);
      toast.success("Xo√° b√¨nh lu·∫≠n th√†nh c√¥ng!");
      loadComments(page);
    } catch (err) {
      toast.error("Kh√¥ng th·ªÉ xo√° b√¨nh lu·∫≠n: " + (err.message || "Vui l√≤ng th·ª≠ l·∫°i."));
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = async (id) => {
    if (!editingContent.trim()) {
      toast.error("B√¨nh lu·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
      return;
    }
    try {
      setLoading(true);
      await updateComment(id, editingContent);
      setEditingId(null);
      setEditingContent("");
      toast.success("S·ª≠a b√¨nh lu·∫≠n th√†nh c√¥ng!");
      loadComments(page);
    } catch (err) {
      toast.error("Kh√¥ng th·ªÉ s·ª≠a b√¨nh lu·∫≠n: " + (err.message || "Vui l√≤ng th·ª≠ l·∫°i."));
    } finally {
      setLoading(false);
    }
  };

  const isAuthorOrAdmin = (comment) =>
    user && (comment.author._id === user._id || user.role === "admin");

  return (
    <div className="comment-section">
      <h3>B√¨nh lu·∫≠n</h3>

      {loading && <p>ƒêang t·∫£i...</p>}

      {user ? (
        <div className="comment-input">
          <textarea
            placeholder="Vi·∫øt b√¨nh lu·∫≠n..."
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            disabled={loading}
          />
          <button onClick={handlePost} disabled={loading}>
            G·ª≠i
          </button>
        </div>
      ) : (
        <p>
          H√£y <a href="/auth/login">ƒëƒÉng nh·∫≠p</a> ƒë·ªÉ b√¨nh lu·∫≠n.
        </p>
      )}

      <ul className="comment-list">
        {comments.length > 0 ? (
          comments.map((c) => (
            <li key={c._id} className="comment-item">
              <strong>{c.author?.username || "·∫®n danh"}:</strong>{" "}
              {editingId === c._id ? (
                <>
                  <textarea
                    value={editingContent}
                    onChange={(e) => setEditingContent(e.target.value)}
                    disabled={loading}
                  />
                  <button onClick={() => handleEdit(c._id)} disabled={loading}>
                    L∆∞u
                  </button>
                  <button onClick={() => setEditingId(null)} disabled={loading}>
                    Hu·ª∑
                  </button>
                </>
              ) : (
                <>
                  <span>{c.content}</span>
                  {isAuthorOrAdmin(c) && (
                    <div className="comment-actions">
                      <button
                        onClick={() => {
                          setEditingId(c._id);
                          setEditingContent(c.content);
                        }}
                        disabled={loading}
                      >
                        ‚úèÔ∏è
                      </button>
                      <button onClick={() => handleDelete(c._id)} disabled={loading}>
                        üóëÔ∏è
                      </button>
                    </div>
                  )}
                </>
              )}
            </li>
          ))
        ) : (
          <p>Ch∆∞a c√≥ b√¨nh lu·∫≠n n√†o.</p>
        )}
      </ul>

      {total > itemsPerPage && (
        <ReactPaginate
          breakLabel="..."
          nextLabel="Ti·∫øp >"
          onPageChange={(event) => loadComments(event.selected + 1)}
          pageRangeDisplayed={5}
          pageCount={Math.ceil(total / itemsPerPage)}
          previousLabel="< Tr∆∞·ªõc"
          renderOnZeroPageCount={null}
          containerClassName="pagination"
          activeClassName="active"
        />
      )}
    </div>
  );
};

export default CommentSection;